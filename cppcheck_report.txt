src/Utilities/Vector3D.h:55:3: style:inconclusive: Technically the member function 'Vector3D::len_squared' can be const. [functionConst]
  len_squared(void);
  ^
src/Utilities/Vector3D.h:99:11: note: Technically the member function 'Vector3D::len_squared' can be const.
Vector3D::len_squared(void) {
          ^
src/Utilities/Vector3D.h:55:3: note: Technically the member function 'Vector3D::len_squared' can be const.
  len_squared(void);
  ^
src/GeometricObjects/GeometricObject.h:54:3: style:inconclusive: Technically the member function 'GeometricObject::get_color' can be const. [functionConst]
  get_color(void);
  ^
src/GeometricObjects/GeometricObject.h:85:18: note: Technically the member function 'GeometricObject::get_color' can be const.
GeometricObject::get_color(void) {
                 ^
src/GeometricObjects/GeometricObject.h:54:3: note: Technically the member function 'GeometricObject::get_color' can be const.
  get_color(void);
  ^
src/Utilities/RGBColor.h:27:3: style: Class 'RGBColor' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  RGBColor(float c);
  ^
src/Utilities/Vector3D.h:31:3: style: Class 'Vector3D' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  Vector3D(double a);
  ^
src/Utilities/Vector3D.h:34:3: style: Class 'Vector3D' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  Vector3D(const Normal& n);
  ^
src/Utilities/Vector3D.h:35:3: style: Class 'Vector3D' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  Vector3D(const Point3D& p);
  ^
src/Utilities/Point3D.h:26:3: style: Class 'Point3D' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  Point3D(const double a);
  ^
src/Tracers/Tracer.h:32:3: style: Class 'Tracer' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  Tracer(World* _world_ptr);
  ^
src/Utilities/Normal.h:30:3: style: Class 'Normal' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  Normal(double a);
  ^
src/Utilities/Normal.h:33:3: style: Class 'Normal' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  Normal(const Vector3D& v);
  ^
src/Utilities/ShadeRec.h:40:3: style: Class 'ShadeRec' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  ShadeRec(World& wr);
  ^
src/Tracers/SingleSphere.h:23:3: style: Class 'SingleSphere' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  SingleSphere(World* _worldPtr);
  ^
src/Tracers/RayCast.h:23:3: style: Class 'RayCast' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  RayCast(World* _worldPtr);
  ^
src/GeometricObjects/Sphere.h:31:3: style: The function 'clone' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  clone(void) const;
  ^
src/GeometricObjects/GeometricObject.h:33:3: note: Virtual function in base class
  clone(void) const = 0;
  ^
src/GeometricObjects/Sphere.h:31:3: note: Function in derived class
  clone(void) const;
  ^
src/GeometricObjects/Sphere.h:49:3: style: The function 'hit' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  hit(const Ray& ray, double& t, ShadeRec& s) const;
  ^
src/GeometricObjects/GeometricObject.h:39:3: note: Virtual function in base class
  hit(const Ray& ray, double& t, ShadeRec& s) const = 0;
  ^
src/GeometricObjects/Sphere.h:49:3: note: Function in derived class
  hit(const Ray& ray, double& t, ShadeRec& s) const;
  ^
src/Tracers/SingleSphere.h:29:3: style: The function 'trace_ray' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  trace_ray(const Ray& ray) const;
  ^
src/Tracers/Tracer.h:38:3: note: Virtual function in base class
  trace_ray(const Ray& ray) const;
  ^
src/Tracers/SingleSphere.h:29:3: note: Function in derived class
  trace_ray(const Ray& ray) const;
  ^
src/Lights/Ambient.h:26:3: style: The function 'clone' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  clone(void) const;
  ^
src/Lights/Light.h:35:3: note: Virtual function in base class
  clone(void) const = 0;
  ^
src/Lights/Ambient.h:26:3: note: Function in derived class
  clone(void) const;
  ^
src/Lights/Ambient.h:47:3: style: The function 'get_direction' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  get_direction(ShadeRec& s);
  ^
src/Lights/Light.h:41:3: note: Virtual function in base class
  get_direction(ShadeRec& sr) = 0;
  ^
src/Lights/Ambient.h:47:3: note: Function in derived class
  get_direction(ShadeRec& s);
  ^
src/Lights/Ambient.h:50:3: style: The function 'L' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  L(ShadeRec& s);
  ^
src/Lights/Light.h:44:3: note: Virtual function in base class
  L(ShadeRec& sr);
  ^
src/Lights/Ambient.h:50:3: note: Function in derived class
  L(ShadeRec& s);
  ^
src/Tracers/RayCast.h:29:3: style: The function 'trace_ray' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  trace_ray(const Ray& ray) const;
  ^
src/Tracers/Tracer.h:38:3: note: Virtual function in base class
  trace_ray(const Ray& ray) const;
  ^
src/Tracers/RayCast.h:29:3: note: Function in derived class
  trace_ray(const Ray& ray) const;
  ^
src/Tracers/RayCast.h:32:3: style: The function 'trace_ray' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  trace_ray(const Ray ray, const int depth) const;
  ^
src/Tracers/Tracer.h:41:3: note: Virtual function in base class
  trace_ray(const Ray ray, const int depth) const;
  ^
src/Tracers/RayCast.h:32:3: note: Function in derived class
  trace_ray(const Ray ray, const int depth) const;
  ^
src/Utilities/Vector3D.h:133:38: style:inconclusive: Function 'operator*' argument 1 names different: declaration 'b' definition 'v'. [funcArgNamesDifferent]
Vector3D::operator* (const Vector3D& v) const {
                                     ^
src/Utilities/Vector3D.h:73:30: note: Function 'operator*' argument 1 names different: declaration 'b' definition 'v'.
  operator* (const Vector3D& b) const;
                             ^
src/Utilities/Vector3D.h:133:38: note: Function 'operator*' argument 1 names different: declaration 'b' definition 'v'.
Vector3D::operator* (const Vector3D& v) const {
                                     ^
src/Utilities/Normal.h:119:24: style:inconclusive: Function 'operator*' argument 1 names different: declaration 'a' definition 'f'. [funcArgNamesDifferent]
operator*(const double f, const Normal& n) {
                       ^
src/Utilities/Normal.h:116:25: note: Function 'operator*' argument 1 names different: declaration 'a' definition 'f'.
operator* (const double a, const Normal& n);
                        ^
src/Utilities/Normal.h:119:24: note: Function 'operator*' argument 1 names different: declaration 'a' definition 'f'.
operator*(const double f, const Normal& n) {
                       ^
src/Cameras/Camera.h:128:30: style:inconclusive: Function 'set_roll' argument 1 names different: declaration 'ra' definition 'r'. [funcArgNamesDifferent]
Camera::set_roll(const float r) {
                             ^
src/Cameras/Camera.h:59:24: note: Function 'set_roll' argument 1 names different: declaration 'ra' definition 'r'.
  set_roll(const float ra);
                       ^
src/Cameras/Camera.h:128:30: note: Function 'set_roll' argument 1 names different: declaration 'ra' definition 'r'.
Camera::set_roll(const float r) {
                             ^
src/Tracers/Tracer.h:41:23: performance: Function parameter 'ray' should be passed by const reference. [passedByValue]
  trace_ray(const Ray ray, const int depth) const;
                      ^
src/Tracers/RayCast.h:32:23: performance: Function parameter 'ray' should be passed by const reference. [passedByValue]
  trace_ray(const Ray ray, const int depth) const;
                      ^
src/BRDFs/BRDF.cpp:20:40: style:inconclusive: Function 'BRDF' argument 1 names different: declaration 'object' definition 'brdf'. [funcArgNamesDifferent]
BRDF::BRDF([[maybe_unused]]const BRDF& brdf) {}
                                       ^
src/BRDFs/BRDF.h:28:20: note: Function 'BRDF' argument 1 names different: declaration 'object' definition 'brdf'.
  BRDF(const BRDF& object);
                   ^
src/BRDFs/BRDF.cpp:20:40: note: Function 'BRDF' argument 1 names different: declaration 'object' definition 'brdf'.
BRDF::BRDF([[maybe_unused]]const BRDF& brdf) {}
                                       ^
src/BRDFs/Lambertian.h:26:3: style: The function 'clone' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  clone(void) const;
  ^
src/BRDFs/BRDF.h:31:3: note: Virtual function in base class
  clone(void) const = 0;
  ^
src/BRDFs/Lambertian.h:26:3: note: Function in derived class
  clone(void) const;
  ^
src/BRDFs/Lambertian.h:34:3: style: The function 'f' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  f(const ShadeRec& sr, const Vector3D& wo, const Vector3D& wi) const;
  ^
src/BRDFs/BRDF.h:37:3: note: Virtual function in base class
  f(const ShadeRec& sr, const Vector3D& wo, const Vector3D& wi) const;
  ^
src/BRDFs/Lambertian.h:34:3: note: Function in derived class
  f(const ShadeRec& sr, const Vector3D& wo, const Vector3D& wi) const;
  ^
src/BRDFs/Lambertian.h:37:3: style: The function 'rho' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  rho(const ShadeRec& sr, const Vector3D& wo) const;
  ^
src/BRDFs/BRDF.h:46:3: note: Virtual function in base class
  rho(const ShadeRec& sr, const Vector3D& wo) const;
  ^
src/BRDFs/Lambertian.h:37:3: note: Function in derived class
  rho(const ShadeRec& sr, const Vector3D& wo) const;
  ^
src/BRDFs/Lambertian.h:65:32: style:inconclusive: Function 'set_ka' argument 1 names different: declaration 'ka' definition 'k'. [funcArgNamesDifferent]
Lambertian::set_ka(const float k) {
                               ^
src/BRDFs/Lambertian.h:40:22: note: Function 'set_ka' argument 1 names different: declaration 'ka' definition 'k'.
  set_ka(const float ka);
                     ^
src/BRDFs/Lambertian.h:65:32: note: Function 'set_ka' argument 1 names different: declaration 'ka' definition 'k'.
Lambertian::set_ka(const float k) {
                               ^
src/BRDFs/Lambertian.h:73:32: style:inconclusive: Function 'set_kd' argument 1 names different: declaration 'kd' definition 'k'. [funcArgNamesDifferent]
Lambertian::set_kd(const float k) {
                               ^
src/BRDFs/Lambertian.h:43:22: note: Function 'set_kd' argument 1 names different: declaration 'kd' definition 'k'.
  set_kd(const float kd);
                     ^
src/BRDFs/Lambertian.h:73:32: note: Function 'set_kd' argument 1 names different: declaration 'kd' definition 'k'.
Lambertian::set_kd(const float k) {
                               ^
src/Cameras/Camera.cpp:30:30: style:inconclusive: Function 'Camera' argument 1 names different: declaration 'camera' definition 'c'. [funcArgNamesDifferent]
Camera::Camera(const Camera& c)
                             ^
src/Cameras/Camera.h:29:24: note: Function 'Camera' argument 1 names different: declaration 'camera' definition 'c'.
  Camera(const Camera& camera);   // copy constructor
                       ^
src/Cameras/Camera.cpp:30:30: note: Function 'Camera' argument 1 names different: declaration 'camera' definition 'c'.
Camera::Camera(const Camera& c)
                             ^
src/Cameras/Camera.cpp:45:34: style:inconclusive: Function 'operator=' argument 1 names different: declaration 'camera' definition 'rhs'. [funcArgNamesDifferent]
Camera::operator= (const Camera& rhs) {
                                 ^
src/Cameras/Camera.h:78:28: note: Function 'operator=' argument 1 names different: declaration 'camera' definition 'rhs'.
  operator= (const Camera& camera);
                           ^
src/Cameras/Camera.cpp:45:34: note: Function 'operator=' argument 1 names different: declaration 'camera' definition 'rhs'.
Camera::operator= (const Camera& rhs) {
                                 ^
src/Utilities/Point2D.h:24:3: style: Class 'Point2D' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  Point2D (const float arg);
  ^
src/Cameras/Pinhole.h:29:3: style: The function 'clone' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  clone(void) const;
  ^
src/Cameras/Camera.h:32:3: note: Virtual function in base class
  clone(void) const = 0;
  ^
src/Cameras/Pinhole.h:29:3: note: Function in derived class
  clone(void) const;
  ^
src/Cameras/Pinhole.h:47:3: style: The function 'render_scene' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  render_scene(const World& w);
  ^
src/Cameras/Camera.h:38:3: note: Virtual function in base class
  render_scene(const World& w) = 0;
  ^
src/Cameras/Pinhole.h:47:3: note: Function in derived class
  render_scene(const World& w);
  ^
src/Cameras/Pinhole.h:61:34: style:inconclusive: Function 'set_view_distance' argument 1 names different: declaration 'vpd' definition '_d'. [funcArgNamesDifferent]
Pinhole::set_view_distance(float _d) {
                                 ^
src/Cameras/Pinhole.h:38:33: note: Function 'set_view_distance' argument 1 names different: declaration 'vpd' definition '_d'.
  set_view_distance(const float vpd);
                                ^
src/Cameras/Pinhole.h:61:34: note: Function 'set_view_distance' argument 1 names different: declaration 'vpd' definition '_d'.
Pinhole::set_view_distance(float _d) {
                                 ^
src/Cameras/Pinhole.cpp:30:33: style:inconclusive: Function 'Pinhole' argument 1 names different: declaration 'ph' definition 'c'. [funcArgNamesDifferent]
Pinhole::Pinhole(const Pinhole& c)
                                ^
src/Cameras/Pinhole.h:26:26: note: Function 'Pinhole' argument 1 names different: declaration 'ph' definition 'c'.
  Pinhole(const Pinhole& ph);
                         ^
src/Cameras/Pinhole.cpp:30:33: note: Function 'Pinhole' argument 1 names different: declaration 'ph' definition 'c'.
Pinhole::Pinhole(const Pinhole& c)
                                ^
src/Cameras/Pinhole.cpp:85:8: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
 int n = (int)sqrt((float)vp.num_samples);
       ^
src/GeometricObjects/Plane.h:30:3: style: The function 'clone' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  clone(void) const;
  ^
src/GeometricObjects/GeometricObject.h:33:3: note: Virtual function in base class
  clone(void) const = 0;
  ^
src/GeometricObjects/Plane.h:30:3: note: Function in derived class
  clone(void) const;
  ^
src/GeometricObjects/Plane.h:39:3: style: The function 'hit' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  hit(const Ray& ray, double& tmin, ShadeRec& sr) const;
  ^
src/GeometricObjects/GeometricObject.h:39:3: note: Virtual function in base class
  hit(const Ray& ray, double& t, ShadeRec& s) const = 0;
  ^
src/GeometricObjects/Plane.h:39:3: note: Function in derived class
  hit(const Ray& ray, double& tmin, ShadeRec& sr) const;
  ^
src/GeometricObjects/Sphere.cpp:73:11: style: The scope of the variable 't' can be reduced. [variableScope]
 double   t;
          ^
src/GeometricObjects/Sphere.cpp:26:24: style:inconclusive: Function 'Sphere' argument 1 names different: declaration 'center' definition 'c'. [funcArgNamesDifferent]
Sphere::Sphere(Point3D c, double r)
                       ^
src/GeometricObjects/Sphere.h:26:18: note: Function 'Sphere' argument 1 names different: declaration 'center' definition 'c'.
  Sphere(Point3D center, double r);     // Constructor
                 ^
src/GeometricObjects/Sphere.cpp:26:24: note: Function 'Sphere' argument 1 names different: declaration 'center' definition 'c'.
Sphere::Sphere(Point3D c, double r)
                       ^
src/GeometricObjects/Sphere.cpp:51:34: style:inconclusive: Function 'operator=' argument 1 names different: declaration 'sphere' definition 'rhs'. [funcArgNamesDifferent]
Sphere::operator= (const Sphere& rhs)
                                 ^
src/GeometricObjects/Sphere.h:37:28: note: Function 'operator=' argument 1 names different: declaration 'sphere' definition 'rhs'.
  operator= (const Sphere& sphere);
                           ^
src/GeometricObjects/Sphere.cpp:51:34: note: Function 'operator=' argument 1 names different: declaration 'sphere' definition 'rhs'.
Sphere::operator= (const Sphere& rhs)
                                 ^
src/GeometricObjects/Sphere.cpp:72:37: style:inconclusive: Function 'hit' argument 2 names different: declaration 't' definition 'tmin'. [funcArgNamesDifferent]
Sphere::hit(const Ray& ray, double& tmin, ShadeRec& sr) const {
                                    ^
src/GeometricObjects/Sphere.h:49:31: note: Function 'hit' argument 2 names different: declaration 't' definition 'tmin'.
  hit(const Ray& ray, double& t, ShadeRec& s) const;
                              ^
src/GeometricObjects/Sphere.cpp:72:37: note: Function 'hit' argument 2 names different: declaration 't' definition 'tmin'.
Sphere::hit(const Ray& ray, double& tmin, ShadeRec& sr) const {
                                    ^
src/GeometricObjects/Sphere.cpp:72:53: style:inconclusive: Function 'hit' argument 3 names different: declaration 's' definition 'sr'. [funcArgNamesDifferent]
Sphere::hit(const Ray& ray, double& tmin, ShadeRec& sr) const {
                                                    ^
src/GeometricObjects/Sphere.h:49:44: note: Function 'hit' argument 3 names different: declaration 's' definition 'sr'.
  hit(const Ray& ray, double& t, ShadeRec& s) const;
                                           ^
src/GeometricObjects/Sphere.cpp:72:53: note: Function 'hit' argument 3 names different: declaration 's' definition 'sr'.
Sphere::hit(const Ray& ray, double& tmin, ShadeRec& sr) const {
                                                    ^
src/GeometricObjects/Sphere.cpp:26:24: performance: Function parameter 'c' should be passed by const reference. [passedByValue]
Sphere::Sphere(Point3D c, double r)
                       ^
src/Lights/Ambient.cpp:67:39: style:inconclusive: Function 'L' argument 1 names different: declaration 's' definition 'sr'. [funcArgNamesDifferent]
Ambient::L([[maybe_unused]] ShadeRec& sr) {
                                      ^
src/Lights/Ambient.h:50:15: note: Function 'L' argument 1 names different: declaration 's' definition 'sr'.
  L(ShadeRec& s);
              ^
src/Lights/Ambient.cpp:67:39: note: Function 'L' argument 1 names different: declaration 's' definition 'sr'.
Ambient::L([[maybe_unused]] ShadeRec& sr) {
                                      ^
src/Lights/Directional.h:32:3: style: The function 'clone' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  clone(void) const;
  ^
src/Lights/Light.h:35:3: note: Virtual function in base class
  clone(void) const = 0;
  ^
src/Lights/Directional.h:32:3: note: Function in derived class
  clone(void) const;
  ^
src/Lights/Directional.h:59:3: style: The function 'get_direction' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  get_direction(ShadeRec& sr);
  ^
src/Lights/Light.h:41:3: note: Virtual function in base class
  get_direction(ShadeRec& sr) = 0;
  ^
src/Lights/Directional.h:59:3: note: Function in derived class
  get_direction(ShadeRec& sr);
  ^
src/Lights/Directional.h:62:3: style: The function 'L' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  L(ShadeRec& sr);
  ^
src/Lights/Light.h:44:3: note: Virtual function in base class
  L(ShadeRec& sr);
  ^
src/Lights/Directional.h:62:3: note: Function in derived class
  L(ShadeRec& sr);
  ^
src/Lights/Directional.cpp:69:43: style:inconclusive: Function 'L' argument 1 names different: declaration 'sr' definition 's'. [funcArgNamesDifferent]
Directional::L([[maybe_unused]] ShadeRec& s) {
                                          ^
src/Lights/Directional.h:62:15: note: Function 'L' argument 1 names different: declaration 'sr' definition 's'.
  L(ShadeRec& sr);
              ^
src/Lights/Directional.cpp:69:43: note: Function 'L' argument 1 names different: declaration 'sr' definition 's'.
Directional::L([[maybe_unused]] ShadeRec& s) {
                                          ^
src/Lights/Directional.h:103:37: performance: Function parameter 'd' should be passed by const reference. [passedByValue]
Directional::set_direction(Vector3D d) {
                                    ^
src/Lights/Light.cpp:41:37: style:inconclusive: Function 'L' argument 1 names different: declaration 'sr' definition 's'. [funcArgNamesDifferent]
Light::L([[maybe_unused]] ShadeRec& s) {
                                    ^
src/Lights/Light.h:44:15: note: Function 'L' argument 1 names different: declaration 'sr' definition 's'.
  L(ShadeRec& sr);
              ^
src/Lights/Light.cpp:41:37: note: Function 'L' argument 1 names different: declaration 'sr' definition 's'.
Light::L([[maybe_unused]] ShadeRec& s) {
                                    ^
src/Materials/Material.cpp:20:53: style:inconclusive: Function 'Material' argument 1 names different: declaration 'material' definition 'm'. [funcArgNamesDifferent]
Material::Material([[maybe_unused]] const Material& m) {}
                                                    ^
src/Materials/Material.h:25:28: note: Function 'Material' argument 1 names different: declaration 'material' definition 'm'.
  Material(const Material& material);
                           ^
src/Materials/Material.cpp:20:53: note: Function 'Material' argument 1 names different: declaration 'material' definition 'm'.
Material::Material([[maybe_unused]] const Material& m) {}
                                                    ^
src/Materials/Matte.h:28:3: style: The function 'clone' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  clone(void) const;
  ^
src/Materials/Material.h:28:3: note: Virtual function in base class
  clone(void) const = 0;
  ^
src/Materials/Matte.h:28:3: note: Function in derived class
  clone(void) const;
  ^
src/Materials/Matte.h:51:3: style: The function 'shade' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  shade(ShadeRec& sr);
  ^
src/Materials/Material.h:34:3: note: Virtual function in base class
  shade(ShadeRec& sr);
  ^
src/Materials/Matte.h:51:3: note: Function in derived class
  shade(ShadeRec& sr);
  ^
src/Materials/Matte.h:65:27: style:inconclusive: Function 'set_ka' argument 1 names different: declaration 'k' definition 'ka'. [funcArgNamesDifferent]
Matte::set_ka(const float ka) {
                          ^
src/Materials/Matte.h:36:22: note: Function 'set_ka' argument 1 names different: declaration 'k' definition 'ka'.
  set_ka(const float k);
                     ^
src/Materials/Matte.h:65:27: note: Function 'set_ka' argument 1 names different: declaration 'k' definition 'ka'.
Matte::set_ka(const float ka) {
                          ^
src/Materials/Matte.h:73:28: style:inconclusive: Function 'set_kd' argument 1 names different: declaration 'k' definition 'kd'. [funcArgNamesDifferent]
Matte::set_kd (const float kd) {
                           ^
src/Materials/Matte.h:39:22: note: Function 'set_kd' argument 1 names different: declaration 'k' definition 'kd'.
  set_kd(const float k);
                     ^
src/Materials/Matte.h:73:28: note: Function 'set_kd' argument 1 names different: declaration 'k' definition 'kd'.
Matte::set_kd (const float kd) {
                           ^
src/Samplers/Hammersley.h:38:3: performance:inconclusive: Technically the member function 'Hammersley::phi' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  phi(int j);
  ^
src/Samplers/Hammersley.cpp:71:13: note: Technically the member function 'Hammersley::phi' can be static (but you may consider moving to unnamed namespace).
Hammersley::phi(int j) {
            ^
src/Samplers/Hammersley.h:38:3: note: Technically the member function 'Hammersley::phi' can be static (but you may consider moving to unnamed namespace).
  phi(int j);
  ^
src/Samplers/Hammersley.h:24:3: style: Class 'Hammersley' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  Hammersley(const int num);
  ^
src/Samplers/Hammersley.h:32:3: style: The function 'clone' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  clone(void) const;
  ^
src/Samplers/Sampler.h:39:3: note: Virtual function in base class
  clone(void) const = 0;
  ^
src/Samplers/Hammersley.h:32:3: note: Function in derived class
  clone(void) const;
  ^
src/Samplers/Hammersley.h:43:3: style: The function 'generate_samples' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  generate_samples(void);
  ^
src/Samplers/Sampler.h:48:3: note: Virtual function in base class
  generate_samples(void) = 0;
  ^
src/Samplers/Hammersley.h:43:3: note: Function in derived class
  generate_samples(void);
  ^
src/Samplers/Hammersley.cpp:36:42: style:inconclusive: Function 'Hammersley' argument 1 names different: declaration 'r' definition 'h'. [funcArgNamesDifferent]
Hammersley::Hammersley(const Hammersley& h)
                                         ^
src/Samplers/Hammersley.h:26:32: note: Function 'Hammersley' argument 1 names different: declaration 'r' definition 'h'.
  Hammersley(const Hammersley& r);
                               ^
src/Samplers/Hammersley.cpp:36:42: note: Function 'Hammersley' argument 1 names different: declaration 'r' definition 'h'.
Hammersley::Hammersley(const Hammersley& h)
                                         ^
src/Samplers/Jittered.h:25:3: style: Class 'Jittered' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  Jittered(const int num_samples);
  ^
src/Samplers/Jittered.h:35:3: style: The function 'clone' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  clone(void) const;
  ^
src/Samplers/Sampler.h:39:3: note: Virtual function in base class
  clone(void) const = 0;
  ^
src/Samplers/Jittered.h:35:3: note: Function in derived class
  clone(void) const;
  ^
src/Samplers/Jittered.h:43:3: style: The function 'generate_samples' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  generate_samples(void);
  ^
src/Samplers/Sampler.h:48:3: note: Virtual function in base class
  generate_samples(void) = 0;
  ^
src/Samplers/Jittered.h:43:3: note: Function in derived class
  generate_samples(void);
  ^
src/Samplers/Jittered.cpp:41:36: style:inconclusive: Function 'Jittered' argument 1 names different: declaration 'u' definition 'js'. [funcArgNamesDifferent]
Jittered::Jittered(const Jittered& js)
                                   ^
src/Samplers/Jittered.h:29:28: note: Function 'Jittered' argument 1 names different: declaration 'u' definition 'js'.
  Jittered(const Jittered& u);
                           ^
src/Samplers/Jittered.cpp:41:36: note: Function 'Jittered' argument 1 names different: declaration 'u' definition 'js'.
Jittered::Jittered(const Jittered& js)
                                   ^
src/Samplers/MultiJittered.h:25:3: style: Class 'MultiJittered' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  MultiJittered(const int num_samples);
  ^
src/Samplers/MultiJittered.h:35:3: style: The function 'clone' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  clone(void) const;
  ^
src/Samplers/Sampler.h:39:3: note: Virtual function in base class
  clone(void) const = 0;
  ^
src/Samplers/MultiJittered.h:35:3: note: Function in derived class
  clone(void) const;
  ^
src/Samplers/MultiJittered.h:43:3: style: The function 'generate_samples' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  generate_samples(void);
  ^
src/Samplers/Sampler.h:48:3: note: Virtual function in base class
  generate_samples(void) = 0;
  ^
src/Samplers/MultiJittered.h:43:3: note: Function in derived class
  generate_samples(void);
  ^
src/Samplers/NRooks.h:24:3: style: Class 'NRooks' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  NRooks(const int num_samples);
  ^
src/Samplers/NRooks.h:34:3: style: The function 'clone' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  clone(void) const;
  ^
src/Samplers/Sampler.h:39:3: note: Virtual function in base class
  clone(void) const = 0;
  ^
src/Samplers/NRooks.h:34:3: note: Function in derived class
  clone(void) const;
  ^
src/Samplers/NRooks.h:42:3: style: The function 'generate_samples' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  generate_samples(void);
  ^
src/Samplers/Sampler.h:48:3: note: Virtual function in base class
  generate_samples(void) = 0;
  ^
src/Samplers/NRooks.h:42:3: note: Function in derived class
  generate_samples(void);
  ^
src/Samplers/PureRandom.h:24:3: style: Class 'PureRandom' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  PureRandom(const int num);
  ^
src/Samplers/PureRandom.h:32:3: style: The function 'clone' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  clone(void) const;
  ^
src/Samplers/Sampler.h:39:3: note: Virtual function in base class
  clone(void) const = 0;
  ^
src/Samplers/PureRandom.h:32:3: note: Function in derived class
  clone(void) const;
  ^
src/Samplers/PureRandom.h:40:3: style: The function 'generate_samples' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  generate_samples(void);
  ^
src/Samplers/Sampler.h:48:3: note: Virtual function in base class
  generate_samples(void) = 0;
  ^
src/Samplers/PureRandom.h:40:3: note: Function in derived class
  generate_samples(void);
  ^
src/Samplers/Regular.h:24:3: style: Class 'Regular' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  Regular(const int num);
  ^
src/Samplers/Regular.h:32:3: style: The function 'clone' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  clone(void) const;
  ^
src/Samplers/Sampler.h:39:3: note: Virtual function in base class
  clone(void) const = 0;
  ^
src/Samplers/Regular.h:32:3: note: Function in derived class
  clone(void) const;
  ^
src/Samplers/Regular.h:38:3: style: The function 'generate_samples' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  generate_samples(void);
  ^
src/Samplers/Sampler.h:48:3: note: Virtual function in base class
  generate_samples(void) = 0;
  ^
src/Samplers/Regular.h:38:3: note: Function in derived class
  generate_samples(void);
  ^
src/Samplers/Sampler.h:51:3: style:inconclusive: Technically the member function 'Sampler::get_num_samples' can be const. [functionConst]
  get_num_samples(void);
  ^
src/Samplers/Sampler.cpp:107:10: note: Technically the member function 'Sampler::get_num_samples' can be const.
Sampler::get_num_samples(void) {
         ^
src/Samplers/Sampler.h:51:3: note: Technically the member function 'Sampler::get_num_samples' can be const.
  get_num_samples(void);
  ^
src/Samplers/Sampler.cpp:254:8: style: The scope of the variable 'r1' can be reduced. [variableScope]
 float r1, r2;
       ^
src/Samplers/Sampler.cpp:254:12: style: The scope of the variable 'r2' can be reduced. [variableScope]
 float r1, r2;
           ^
src/Samplers/Sampler.cpp:255:8: style: The scope of the variable 'x' can be reduced. [variableScope]
 float x, y, z;
       ^
src/Samplers/Sampler.cpp:255:11: style: The scope of the variable 'y' can be reduced. [variableScope]
 float x, y, z;
          ^
src/Samplers/Sampler.cpp:255:14: style: The scope of the variable 'z' can be reduced. [variableScope]
 float x, y, z;
             ^
src/Samplers/Sampler.cpp:256:8: style: The scope of the variable 'r' can be reduced. [variableScope]
 float r, phi;
       ^
src/Samplers/Sampler.cpp:256:11: style: The scope of the variable 'phi' can be reduced. [variableScope]
 float r, phi;
          ^
src/Samplers/Sampler.cpp:35:28: style:inconclusive: Function 'Sampler' argument 1 names different: declaration 'num' definition 'ns'. [funcArgNamesDifferent]
Sampler::Sampler(const int ns)
                           ^
src/Samplers/Sampler.h:29:21: note: Function 'Sampler' argument 1 names different: declaration 'num' definition 'ns'.
  Sampler(const int num);
                    ^
src/Samplers/Sampler.cpp:35:28: note: Function 'Sampler' argument 1 names different: declaration 'num' definition 'ns'.
Sampler::Sampler(const int ns)
                           ^
src/Samplers/Sampler.cpp:47:28: style:inconclusive: Function 'Sampler' argument 1 names different: declaration 'num' definition 'ns'. [funcArgNamesDifferent]
Sampler::Sampler(const int ns, const int n_sets)
                           ^
src/Samplers/Sampler.h:31:21: note: Function 'Sampler' argument 1 names different: declaration 'num' definition 'ns'.
  Sampler(const int num, const int num_sets);
                    ^
src/Samplers/Sampler.cpp:47:28: note: Function 'Sampler' argument 1 names different: declaration 'num' definition 'ns'.
Sampler::Sampler(const int ns, const int n_sets)
                           ^
src/Samplers/Sampler.cpp:47:42: style:inconclusive: Function 'Sampler' argument 2 names different: declaration 'num_sets' definition 'n_sets'. [funcArgNamesDifferent]
Sampler::Sampler(const int ns, const int n_sets)
                                         ^
src/Samplers/Sampler.h:31:36: note: Function 'Sampler' argument 2 names different: declaration 'num_sets' definition 'n_sets'.
  Sampler(const int num, const int num_sets);
                                   ^
src/Samplers/Sampler.cpp:47:42: note: Function 'Sampler' argument 2 names different: declaration 'num_sets' definition 'n_sets'.
Sampler::Sampler(const int ns, const int n_sets)
                                         ^
src/Samplers/Sampler.cpp:229:48: style:inconclusive: Function 'map_samples_to_hemisphere' argument 1 names different: declaration 'p' definition 'exp'. [funcArgNamesDifferent]
Sampler::map_samples_to_hemisphere(const float exp) {
                                               ^
src/Samplers/Sampler.h:66:41: note: Function 'map_samples_to_hemisphere' argument 1 names different: declaration 'p' definition 'exp'.
  map_samples_to_hemisphere(const float p);
                                        ^
src/Samplers/Sampler.cpp:229:48: note: Function 'map_samples_to_hemisphere' argument 1 names different: declaration 'p' definition 'exp'.
Sampler::map_samples_to_hemisphere(const float exp) {
                                               ^
src/Tracers/MultipleObjects.h:23:3: style: Class 'MultipleObjects' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  MultipleObjects(World* _world_ptr);
  ^
src/Tracers/MultipleObjects.h:29:3: style: The function 'trace_ray' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  trace_ray(const Ray& ray) const;
  ^
src/Tracers/Tracer.h:38:3: note: Virtual function in base class
  trace_ray(const Ray& ray) const;
  ^
src/Tracers/MultipleObjects.h:29:3: note: Function in derived class
  trace_ray(const Ray& ray) const;
  ^
src/Tracers/MultipleObjects.cpp:23:41: style:inconclusive: Function 'MultipleObjects' argument 1 names different: declaration '_world_ptr' definition '_worldPtr'. [funcArgNamesDifferent]
MultipleObjects::MultipleObjects(World* _worldPtr)
                                        ^
src/Tracers/MultipleObjects.h:23:26: note: Function 'MultipleObjects' argument 1 names different: declaration '_world_ptr' definition '_worldPtr'.
  MultipleObjects(World* _world_ptr);
                         ^
src/Tracers/MultipleObjects.cpp:23:41: note: Function 'MultipleObjects' argument 1 names different: declaration '_world_ptr' definition '_worldPtr'.
MultipleObjects::MultipleObjects(World* _worldPtr)
                                        ^
src/Tracers/RayCast.cpp:52:30: performance: Function parameter 'ray' should be passed by const reference. [passedByValue]
RayCast::trace_ray(const Ray ray, [[maybe_unused]] const int depth) const {
                             ^
src/Tracers/Tracer.cpp:22:23: style:inconclusive: Function 'Tracer' argument 1 names different: declaration '_world_ptr' definition '_worldPtr'. [funcArgNamesDifferent]
Tracer::Tracer(World* _worldPtr)
                      ^
src/Tracers/Tracer.h:32:17: note: Function 'Tracer' argument 1 names different: declaration '_world_ptr' definition '_worldPtr'.
  Tracer(World* _world_ptr);
                ^
src/Tracers/Tracer.cpp:22:23: note: Function 'Tracer' argument 1 names different: declaration '_world_ptr' definition '_worldPtr'.
Tracer::Tracer(World* _worldPtr)
                      ^
src/Tracers/Tracer.cpp:45:46: performance: Function parameter 'ray' should be passed by const reference. [passedByValue]
Tracer::trace_ray([[maybe_unused]] const Ray ray, [[maybe_unused]] const int depth) const {
                                             ^
src/Utilities/Point3D.cpp:47:36: style:inconclusive: Function 'operator=' argument 1 names different: declaration 'p' definition 'rhs'. [funcArgNamesDifferent]
Point3D::operator= (const Point3D& rhs) {
                                   ^
src/Utilities/Point3D.h:32:29: note: Function 'operator=' argument 1 names different: declaration 'p' definition 'rhs'.
  operator= (const Point3D& p);
                            ^
src/Utilities/Point3D.cpp:47:36: note: Function 'operator=' argument 1 names different: declaration 'p' definition 'rhs'.
Point3D::operator= (const Point3D& rhs) {
                                   ^
src/Utilities/Vector3D.cpp:35:36: style:inconclusive: Function 'Vector3D' argument 1 names different: declaration 'v' definition 'vector'. [funcArgNamesDifferent]
Vector3D::Vector3D(const Vector3D& vector)
                                   ^
src/Utilities/Vector3D.h:33:28: note: Function 'Vector3D' argument 1 names different: declaration 'v' definition 'vector'.
  Vector3D(const Vector3D& v);
                           ^
src/Utilities/Vector3D.cpp:35:36: note: Function 'Vector3D' argument 1 names different: declaration 'v' definition 'vector'.
Vector3D::Vector3D(const Vector3D& vector)
                                   ^
src/World/World.h:117:3: style:inconclusive: Technically the member function 'World::render_multiple_objects_3_9' can be const. [functionConst]
  render_multiple_objects_3_9(void);
  ^
src/World/BuildMultipleObjects3_9.cpp:44:8: note: Technically the member function 'World::render_multiple_objects_3_9' can be const.
World::render_multiple_objects_3_9(void) {
       ^
src/World/World.h:117:3: note: Technically the member function 'World::render_multiple_objects_3_9' can be const.
  render_multiple_objects_3_9(void);
  ^
src/World/World.h:114:3: style:inconclusive: Technically the member function 'World::render_single_sphere_3_6_5' can be const. [functionConst]
  render_single_sphere_3_6_5( void );
  ^
src/World/BuildSingleSphere3_6_5.cpp:30:8: note: Technically the member function 'World::render_single_sphere_3_6_5' can be const.
World::render_single_sphere_3_6_5(void) {
       ^
src/World/World.h:114:3: note: Technically the member function 'World::render_single_sphere_3_6_5' can be const.
  render_single_sphere_3_6_5( void );
  ^
src/World/World.h:73:3: performance:inconclusive: Technically the member function 'World::max_to_one' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  max_to_one(const RGBColor& c) const;
  ^
src/World/World.cpp:99:8: note: Technically the member function 'World::max_to_one' can be static (but you may consider moving to unnamed namespace).
World::max_to_one(const RGBColor& c) const  {
       ^
src/World/World.h:73:3: note: Technically the member function 'World::max_to_one' can be static (but you may consider moving to unnamed namespace).
  max_to_one(const RGBColor& c) const;
  ^
src/World/World.h:76:3: performance:inconclusive: Technically the member function 'World::clamp_to_color' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  clamp_to_color(const RGBColor& c) const;
  ^
src/World/World.cpp:114:8: note: Technically the member function 'World::clamp_to_color' can be static (but you may consider moving to unnamed namespace).
World::clamp_to_color(const RGBColor& raw_color) const {
       ^
src/World/World.h:76:3: note: Technically the member function 'World::clamp_to_color' can be static (but you may consider moving to unnamed namespace).
  clamp_to_color(const RGBColor& c) const;
  ^
src/World/World.cpp:67:3: warning: Class 'World' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
  ambient_ptr(new Ambient),
  ^
src/World/World.cpp:67:3: warning: Class 'World' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
  ambient_ptr(new Ambient),
  ^
src/World/World.cpp:114:39: style:inconclusive: Function 'clamp_to_color' argument 1 names different: declaration 'c' definition 'raw_color'. [funcArgNamesDifferent]
World::clamp_to_color(const RGBColor& raw_color) const {
                                      ^
src/World/World.h:76:34: note: Function 'clamp_to_color' argument 1 names different: declaration 'c' definition 'raw_color'.
  clamp_to_color(const RGBColor& c) const;
                                 ^
src/World/World.cpp:114:39: note: Function 'clamp_to_color' argument 1 names different: declaration 'c' definition 'raw_color'.
World::clamp_to_color(const RGBColor& raw_color) const {
                                      ^
src/World/World.cpp:136:105: style:inconclusive: Function 'display_pixel' argument 3 names different: declaration 'pixel_color' definition 'raw_color'. [funcArgNamesDifferent]
World::display_pixel([[maybe_unused]] const int row, [[maybe_unused]] const int column, const RGBColor& raw_color) const {
                                                                                                        ^
src/World/World.h:79:66: note: Function 'display_pixel' argument 3 names different: declaration 'pixel_color' definition 'raw_color'.
  display_pixel(const int row, const int column, const RGBColor& pixel_color) const;
                                                                 ^
src/World/World.cpp:136:105: note: Function 'display_pixel' argument 3 names different: declaration 'pixel_color' definition 'raw_color'.
World::display_pixel([[maybe_unused]] const int row, [[maybe_unused]] const int column, const RGBColor& raw_color) const {
                                                                                                        ^
third_party/googletest-release-1.10.0/googlemock/src/gmock-spec-builders.cc:640:13: style:inconclusive: Technically the member function 'testing::::MockObjectRegistry::states' can be const. [functionConst]
  StateMap& states() { return states_; }
            ^
third_party/googletest-release-1.10.0/googlemock/test/gmock-actions_test.cc:96:1: error: syntax error [syntaxError]
TEST(BuiltInDefaultValueTest, ExistsForPointerTypes) {
^
third_party/googletest-release-1.10.0/googlemock/test/gmock-cardinalities_test.cc:62:1: error: syntax error [syntaxError]
TEST(CardinalityTest, IsDefaultConstructable) {
^
third_party/googletest-release-1.10.0/googlemock/test/gmock-function-mocker_test.cc:190:1: error: syntax error [syntaxError]
TEST_F(MockMethodFunctionMockerTest, MocksVoidFunction) {
^
third_party/googletest-release-1.10.0/googlemock/test/gmock-generated-actions_test.cc:965:39: error: syntax error [syntaxError]
                HAS_1_TEMPLATE_PARAMS(template <typename Pointee> class,
                                      ^
third_party/googletest-release-1.10.0/googlemock/test/gmock-generated-function-mockers_test.cc:193:1: error: syntax error [syntaxError]
TEST_F(FunctionMockerTest, MocksVoidFunction) {
^
third_party/googletest-release-1.10.0/googlemock/test/gmock-generated-matchers_test.cc:149:1: error: syntax error [syntaxError]
TEST(ElementsAreTest, CanDescribeExpectingNoElement) {
^
third_party/googletest-release-1.10.0/googlemock/test/gmock-internal-utils_test.cc:77:1: error: syntax error [syntaxError]
TEST(JoinAsTupleTest, JoinsOneTuple) {
^
third_party/googletest-release-1.10.0/googlemock/test/gmock-matchers_test.cc:165:1: error: syntax error [syntaxError]
TEST(MonotonicMatcherTest, IsPrintable) {
^
third_party/googletest-release-1.10.0/googlemock/test/gmock-more-actions_test.cc:227:1: error: syntax error [syntaxError]
TEST(InvokeTest, Nullary) {
^
third_party/googletest-release-1.10.0/googlemock/test/gmock-nice-strict_test.cc:233:1: error: syntax error [syntaxError]
TEST(NiceMockTest, AllowsExpectedCall) {
^
third_party/googletest-release-1.10.0/googlemock/test/gmock-nice-strict_test.cc:136:1: error: syntax error [syntaxError]
TEST(RawMockTest, WarningForUninterestingCall) {
^
third_party/googletest-release-1.10.0/googlemock/test/gmock-pp-string_test.cc:110:3: error: There is an unknown macro here somewhere. Configuration is required. If sss is a macro then please configure it. [unknownMacro]
  EXPECT_EXPANSION("0", GMOCK_PP_IS_BEGIN_PARENS(sss() sss));
  ^
third_party/googletest-release-1.10.0/googlemock/test/gmock-pp_test.cc:34:41: error: There is an unknown macro here somewhere. Configuration is required. If sss is a macro then please configure it. [unknownMacro]
static_assert(!GMOCK_PP_IS_BEGIN_PARENS(sss() sss), "");
                                        ^
third_party/googletest-release-1.10.0/googlemock/test/gmock-spec-builders_test.cc:123:1: error: syntax error [syntaxError]
TEST(MockMethodTest, CanInstantiateWithIncompleteArgType) {
^
third_party/googletest-release-1.10.0/googlemock/test/gmock_ex_test.cc:56:1: error: syntax error [syntaxError]
TEST(DefaultValueTest, ThrowsRuntimeErrorWhenNoDefaultValue) {
^
third_party/googletest-release-1.10.0/googlemock/test/gmock_leak_test_.cc:58:1: error: syntax error [syntaxError]
TEST(LeakTest, LeakedMockWithExpectCallCausesFailureWhenLeakCheckingIsEnabled) {
^
third_party/googletest-release-1.10.0/googlemock/test/gmock_stress_test.cc:197:1: error: syntax error [syntaxError]
TEST(StressTest, CanUseGMockWithThreads) {
^
third_party/googletest-release-1.10.0/googletest/samples/sample10_unittest.cc:94:1: error: syntax error [syntaxError]
TEST(ListenersTest, DoesNotLeak) {
^
third_party/googletest-release-1.10.0/googletest/samples/sample1_unittest.cc:100:1: error: syntax error [syntaxError]
TEST(FactorialTest, Zero) {
^
third_party/googletest-release-1.10.0/googletest/samples/sample2.cc:49:32: style:inconclusive: Function 'Set' argument 1 names different: declaration 'c_string' definition 'a_c_string'. [funcArgNamesDifferent]
void MyString::Set(const char* a_c_string) {
                               ^
third_party/googletest-release-1.10.0/googletest/samples/sample2.h:77:24: note: Function 'Set' argument 1 names different: declaration 'c_string' definition 'a_c_string'.
  void Set(const char* c_string);
                       ^
third_party/googletest-release-1.10.0/googletest/samples/sample2.cc:49:32: note: Function 'Set' argument 1 names different: declaration 'c_string' definition 'a_c_string'.
void MyString::Set(const char* a_c_string) {
                               ^
third_party/googletest-release-1.10.0/googletest/samples/sample2_unittest.cc:77:1: error: syntax error [syntaxError]
TEST(MyString, ConstructorFromCString) {
^
third_party/googletest-release-1.10.0/googletest/samples/sample3_unittest.cc:120:1: error: syntax error [syntaxError]
TEST_F(QueueTestSmpl3, DefaultConstructor) {
^
third_party/googletest-release-1.10.0/googletest/samples/sample5_unittest.cc:97:1: error: syntax error [syntaxError]
TEST_F(IntegerFunctionTest, Factorial) {
^
third_party/googletest-release-1.10.0/googletest/samples/prime_tables.h:83:34: warning: Class 'PreCalculatedPrimeTable' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
      : is_prime_size_(max + 1), is_prime_(new bool[max + 1]) {
                                 ^
third_party/googletest-release-1.10.0/googletest/samples/sample6_unittest.cc:99:1: error: syntax error [syntaxError]
TYPED_TEST(PrimeTableTest, ReturnsFalseForNonPrimes) {
^
third_party/googletest-release-1.10.0/googletest/samples/sample6_unittest.cc:170:1: error: syntax error [syntaxError]
TYPED_TEST_P(PrimeTableTest2, ReturnsFalseForNonPrimes) {
^
third_party/googletest-release-1.10.0/googletest/samples/sample7_unittest.cc:79:1: error: syntax error [syntaxError]
TEST_P(PrimeTableTestSmpl7, ReturnsFalseForNonPrimes) {
^
third_party/googletest-release-1.10.0/googletest/samples/sample8_unittest.cc:107:1: error: syntax error [syntaxError]
TEST_P(PrimeTableTest, ReturnsFalseForNonPrimes) {
^
third_party/googletest-release-1.10.0/googletest/samples/sample9_unittest.cc:90:1: error: syntax error [syntaxError]
TEST(CustomOutputTest, PrintsMessage) {
^
third_party/googletest-release-1.10.0/googletest/src/gtest-death-test.cc:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
third_party/googletest-release-1.10.0/googletest/src/gtest-death-test.cc:1179:0: information: Skipping configuration 'GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_;GTEST_HAS_DEATH_TEST' since the value of 'GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_();
^
third_party/googletest-release-1.10.0/googletest/src/gtest-death-test.cc:1395:30: style: Variable 'child_pid' is reassigned a value before the old one has been used. [redundantAssignment]
  if (use_fork && (child_pid = fork()) == 0) {
                             ^
third_party/googletest-release-1.10.0/googletest/src/gtest-death-test.cc:1387:15: note: child_pid is assigned
    child_pid = clone(&ExecDeathTestChildMain, stack_top, SIGCHLD, &args);
              ^
third_party/googletest-release-1.10.0/googletest/src/gtest-death-test.cc:1395:30: note: child_pid is overwritten
  if (use_fork && (child_pid = fork()) == 0) {
                             ^
third_party/googletest-release-1.10.0/googletest/src/gtest-death-test.cc:1089:48: style:inconclusive: Function 'ForkingDeathTest' argument 1 names different: declaration 'statement' definition 'a_statement'. [funcArgNamesDifferent]
ForkingDeathTest::ForkingDeathTest(const char* a_statement,
                                               ^
third_party/googletest-release-1.10.0/googletest/src/gtest-death-test.cc:1075:32: note: Function 'ForkingDeathTest' argument 1 names different: declaration 'statement' definition 'a_statement'.
  ForkingDeathTest(const char* statement, Matcher<const std::string&> matcher);
                               ^
third_party/googletest-release-1.10.0/googletest/src/gtest-death-test.cc:1089:48: note: Function 'ForkingDeathTest' argument 1 names different: declaration 'statement' definition 'a_statement'.
ForkingDeathTest::ForkingDeathTest(const char* a_statement,
                                               ^
third_party/googletest-release-1.10.0/googletest/src/gtest-death-test.cc:1301:26: error: Uninitialized variable: dummy [uninitvar]
  StackLowerThanAddress(&dummy, &result);
                         ^
third_party/googletest-release-1.10.0/googletest/src/gtest-death-test.cc:190:0: information: Skipping configuration 'GTEST_HAS_DEATH_TEST;GTEST_KILLED_BY_SIGNAL_OVERRIDE_;GTEST_OS_FUCHSIA=0;GTEST_OS_WINDOWS=0' since the value of 'GTEST_KILLED_BY_SIGNAL_OVERRIDE_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (GTEST_KILLED_BY_SIGNAL_OVERRIDE_(signum_, exit_status, &result)) {
^
third_party/googletest-release-1.10.0/googletest/src/gtest-death-test.cc:866:7: style:inconclusive: Technically the member function 'testing::internal::Arguments::size' can be const. [functionConst]
  int size() {
      ^
third_party/googletest-release-1.10.0/googletest/src/gtest-death-test.cc:1225:7: style: struct member 'ExecDeathTestArgs::close_fd' is never used. [unusedStructMember]
  int close_fd;       // File descriptor to close; the read end of a pipe
      ^
third_party/googletest-release-1.10.0/googletest/src/gtest-filepath.cc:112:3: style:inconclusive: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
  return FilePath(result == nullptr ? "" : cwd);
  ^
third_party/googletest-release-1.10.0/googletest/src/gtest-filepath.cc:104:0: information: Skipping configuration 'PATH_MAX' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char cwd[GTEST_PATH_MAX_ + 1] = { '\0' };
^
third_party/googletest-release-1.10.0/googletest/src/gtest-filepath.cc:104:0: information: Skipping configuration '_XOPEN_PATH_MAX' since the value of '_XOPEN_PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char cwd[GTEST_PATH_MAX_ + 1] = { '\0' };
^
third_party/googletest-release-1.10.0/googletest/src/gtest-port.cc:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
third_party/googletest-release-1.10.0/googletest/src/gtest-port.cc:1333:0: information: Skipping configuration 'GTEST_GET_BOOL_FROM_ENV_' since the value of 'GTEST_GET_BOOL_FROM_ENV_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return GTEST_GET_BOOL_FROM_ENV_(flag, default_value);
^
third_party/googletest-release-1.10.0/googletest/src/gtest-port.cc:1347:0: information: Skipping configuration 'GTEST_GET_INT32_FROM_ENV_' since the value of 'GTEST_GET_INT32_FROM_ENV_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return GTEST_GET_INT32_FROM_ENV_(flag, default_value);
^
third_party/googletest-release-1.10.0/googletest/src/gtest-port.cc:1390:0: information: Skipping configuration 'GTEST_GET_STRING_FROM_ENV_' since the value of 'GTEST_GET_STRING_FROM_ENV_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return GTEST_GET_STRING_FROM_ENV_(flag, default_value);
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 37 configurations. Use --force to check all configurations. [toomanyconfigs]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:4819:34: error: Null pointer dereference: static_cast<volatile int*>(nullptr) [nullPointer]
      *static_cast<volatile int*>(nullptr) = 1;
                                 ^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3471:1: style:inconclusive: Function 'OnTestProgramStart' argument 1 names different: declaration 'unit_test' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3399:43: note: Function 'OnTestProgramStart' argument 1 names different: declaration 'unit_test' definition 'parameter'.
  void OnTestProgramStart(const UnitTest& unit_test) override;
                                          ^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3471:1: note: Function 'OnTestProgramStart' argument 1 names different: declaration 'unit_test' definition 'parameter'.
GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3472:1: style:inconclusive: Function 'OnEnvironmentsSetUpStart' argument 1 names different: declaration 'unit_test' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3401:49: note: Function 'OnEnvironmentsSetUpStart' argument 1 names different: declaration 'unit_test' definition 'parameter'.
  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
                                                ^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3472:1: note: Function 'OnEnvironmentsSetUpStart' argument 1 names different: declaration 'unit_test' definition 'parameter'.
GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3478:1: style:inconclusive: Function 'OnTestStart' argument 1 names different: declaration 'test_info' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3408:36: note: Function 'OnTestStart' argument 1 names different: declaration 'test_info' definition 'parameter'.
  void OnTestStart(const TestInfo& test_info) override;
                                   ^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3478:1: note: Function 'OnTestStart' argument 1 names different: declaration 'test_info' definition 'parameter'.
GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3479:1: style:inconclusive: Function 'OnTestPartResult' argument 1 names different: declaration 'result' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3409:47: note: Function 'OnTestPartResult' argument 1 names different: declaration 'result' definition 'parameter'.
  void OnTestPartResult(const TestPartResult& result) override;
                                              ^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3479:1: note: Function 'OnTestPartResult' argument 1 names different: declaration 'result' definition 'parameter'.
GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3480:1: style:inconclusive: Function 'OnEnvironmentsTearDownStart' argument 1 names different: declaration 'unit_test' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3416:52: note: Function 'OnEnvironmentsTearDownStart' argument 1 names different: declaration 'unit_test' definition 'parameter'.
  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
                                                   ^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3480:1: note: Function 'OnEnvironmentsTearDownStart' argument 1 names different: declaration 'unit_test' definition 'parameter'.
GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3481:1: style:inconclusive: Function 'OnEnvironmentsSetUpEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3402:47: note: Function 'OnEnvironmentsSetUpEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'.
  void OnEnvironmentsSetUpEnd(const UnitTest& unit_test) override;
                                              ^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3481:1: note: Function 'OnEnvironmentsSetUpEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'.
GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3482:1: style:inconclusive: Function 'OnEnvironmentsTearDownEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3417:50: note: Function 'OnEnvironmentsTearDownEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'.
  void OnEnvironmentsTearDownEnd(const UnitTest& unit_test) override;
                                                 ^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3482:1: note: Function 'OnEnvironmentsTearDownEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'.
GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3483:1: style:inconclusive: Function 'OnTestEnd' argument 1 names different: declaration 'test_info' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3410:34: note: Function 'OnTestEnd' argument 1 names different: declaration 'test_info' definition 'parameter'.
  void OnTestEnd(const TestInfo& test_info) override;
                                 ^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3483:1: note: Function 'OnTestEnd' argument 1 names different: declaration 'test_info' definition 'parameter'.
GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3489:1: style:inconclusive: Function 'OnTestProgramEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3419:41: note: Function 'OnTestProgramEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'.
  void OnTestProgramEnd(const UnitTest& unit_test) override;
                                        ^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3489:1: note: Function 'OnTestProgramEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'.
GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3836:18: performance: Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant. [stlcstrParam]
              << EscapeXmlAttribute(summary.c_str())
                 ^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:413:0: information: Skipping configuration 'GTEST_CUSTOM_GET_ARGVS_' since the value of 'GTEST_CUSTOM_GET_ARGVS_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:6104:0: information: Skipping configuration 'GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_' since the value of 'GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:6114:0: information: Skipping configuration 'GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_' since the value of 'GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:6130:0: information: Skipping configuration 'GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_' since the value of 'GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(&argc, argv);
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:6138:0: information: Skipping configuration 'GTEST_CUSTOM_TEMPDIR_FUNCTION_' since the value of 'GTEST_CUSTOM_TEMPDIR_FUNCTION_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:5115:0: information: Skipping configuration 'GTEST_CUSTOM_TEST_EVENT_LISTENER_' since the value of 'GTEST_CUSTOM_TEST_EVENT_LISTENER_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:5256:0: information: Skipping configuration 'GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_;GTEST_HAS_DEATH_TEST' since the value of 'GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
^
third_party/googletest-release-1.10.0/googletest/test/googletest-death-test-test.cc:1421:29: error: There is an unknown macro here somewhere. Configuration is required. If ; is a macro then please configure it. [unknownMacro]
  EXPECT_DEATH_IF_SUPPORTED(;, "");
                            ^
third_party/googletest-release-1.10.0/googletest/test/googletest-death-test-test.cc:749:65: error: There is an unknown macro here somewhere. Configuration is required. If ; is a macro then please configure it. [unknownMacro]
  ASSERT_DEBUG_DEATH(GTEST_LOG_(INFO) << "In ASSERT_DEBUG_DEATH"; return, "")
                                                                ^
third_party/googletest-release-1.10.0/googletest/test/googletest-death-test-test.cc:1344:53: error: There is an unknown macro here somewhere. Configuration is required. If ; is a macro then please configure it. [unknownMacro]
  EXPECT_NONFATAL_FAILURE(EXPECT_DEATH_IF_SUPPORTED(;, ""), "");
                                                    ^
third_party/googletest-release-1.10.0/googletest/test/googletest-filepath-test.cc:97:1: error: syntax error [syntaxError]
TEST(IsEmptyTest, ReturnsTrueForEmptyPath) {
^
third_party/googletest-release-1.10.0/googletest/test/googletest-filter-unittest_.cc:49:1: error: syntax error [syntaxError]
TEST_F(FooTest, Abc) {
^
third_party/googletest-release-1.10.0/googletest/test/googletest-listener-test.cc:226:1: error: syntax error [syntaxError]
TEST_F(ListenerTest, DoesFoo) {
^
third_party/googletest-release-1.10.0/googletest/test/googletest-message-test.cc:44:1: error: syntax error [syntaxError]
TEST(MessageTest, DefaultConstructor) {
^
third_party/googletest-release-1.10.0/googletest/test/googletest-options-test.cc:60:1: error: syntax error [syntaxError]
TEST(XmlOutputTest, GetOutputFormatDefault) {
^
third_party/googletest-release-1.10.0/googletest/test/googletest-output-test_.cc:105:26: error: syntax error [syntaxError]
INSTANTIATE_TEST_SUITE_P(, EmptyBasenameParamInst, testing::Values(1));
                         ^
third_party/googletest-release-1.10.0/googletest/test/googletest-param-test-invalid-name1-test_.cc:36:1: error: syntax error [syntaxError]
TEST_P(DummyTest, Dummy) {
^
third_party/googletest-release-1.10.0/googletest/test/googletest-param-test-invalid-name2-test_.cc:41:1: error: syntax error [syntaxError]
TEST_P(DummyTest, Dummy) {
^
third_party/googletest-release-1.10.0/googletest/test/googletest-param-test-test.cc:830:15: style:inconclusive: Technically the member function 'CustomParamNameFunctor::operator()' can be const. [functionConst]
  std::string operator()(const ::testing::TestParamInfo<std::string>& inf) {
              ^
third_party/googletest-release-1.10.0/googletest/test/googletest-param-test-test.cc:491:3: style: Class 'NonDefaultConstructAssignString' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  NonDefaultConstructAssignString(const std::string& s) : str_(s) {}
  ^
third_party/googletest-release-1.10.0/googletest/test/googletest-param-test-test.cc:537:7: style: Redundant initialization for 'gen'. The initialized value is overwritten before it is read. [redundantInitialization]
  gen = gen2;
      ^
third_party/googletest-release-1.10.0/googletest/test/googletest-param-test-test.cc:535:27: note: gen is initialized
  ParamGenerator<int> gen = Values(1, 2);
                          ^
third_party/googletest-release-1.10.0/googletest/test/googletest-param-test-test.cc:537:7: note: gen is overwritten
  gen = gen2;
      ^
third_party/googletest-release-1.10.0/googletest/test/googletest-port-test.cc:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
third_party/googletest-release-1.10.0/googletest/test/googletest-port-test.cc:67:1: error: syntax error [syntaxError]
TEST(IsXDigitTest, ReturnsFalseForNarrowNonAscii) {
^
third_party/googletest-release-1.10.0/googletest/test/googletest-printers-test.cc:251:1: error: syntax error [syntaxError]
TEST(PrintEnumTest, AnonymousEnum) {
^
third_party/googletest-release-1.10.0/googletest/test/googletest-shuffle-test_.cc:49:1: error: syntax error [syntaxError]
TEST_F(A, A) {}
^
third_party/googletest-release-1.10.0/googletest/test/googletest-test-part-test.cc:56:1: error: syntax error [syntaxError]
TEST_F(TestPartResultTest, ConstructorWorks) {
^
third_party/googletest-release-1.10.0/googletest/test/gtest-typed-test_test.cc:167:1: error: syntax error [syntaxError]
TYPED_TEST(NumericTest, DefaultIsZero) {
^
third_party/googletest-release-1.10.0/googletest/test/gtest-typed-test_test.cc:412:1: error: syntax error [syntaxError]
TYPED_TEST_P(NumericTest, DefaultIsZero) {
^
third_party/googletest-release-1.10.0/googletest/test/gtest-unittest-api_test.cc:113:1: error: syntax error [syntaxError]
TEST(ApiTest, UnitTestImmutableAccessorsWork) {
^
third_party/googletest-release-1.10.0/googletest/test/gtest-unittest-api_test.cc:101:1: error: syntax error [syntaxError]
TYPED_TEST(TestSuiteWithCommentTest, Dummy) {}
^
third_party/googletest-release-1.10.0/googletest/test/gtest_environment_test.cc:107:1: error: syntax error [syntaxError]
TEST(FooTest, Bar) {
^
third_party/googletest-release-1.10.0/googletest/test/gtest_pred_impl_unittest.cc:94:8: style:inconclusive: Technically the member function 'PredFunctor1::operator()' can be const. [functionConst]
  bool operator()(const T1& v1) {
       ^
third_party/googletest-release-1.10.0/googletest/test/gtest_pred_impl_unittest.cc:481:8: style:inconclusive: Technically the member function 'PredFunctor2::operator()' can be const. [functionConst]
  bool operator()(const T1& v1,
       ^
third_party/googletest-release-1.10.0/googletest/test/gtest_pred_impl_unittest.cc:910:8: style:inconclusive: Technically the member function 'PredFunctor3::operator()' can be const. [functionConst]
  bool operator()(const T1& v1,
       ^
third_party/googletest-release-1.10.0/googletest/test/gtest_pred_impl_unittest.cc:1381:8: style:inconclusive: Technically the member function 'PredFunctor4::operator()' can be const. [functionConst]
  bool operator()(const T1& v1,
       ^
third_party/googletest-release-1.10.0/googletest/test/gtest_pred_impl_unittest.cc:1894:8: style:inconclusive: Technically the member function 'PredFunctor5::operator()' can be const. [functionConst]
  bool operator()(const T1& v1,
       ^
third_party/googletest-release-1.10.0/googletest/test/gtest_premature_exit_test.cc:79:1: error: syntax error [syntaxError]
TEST_F(PrematureExitDeathTest, FileExistsDuringExecutionOfDeathTest) {
^
third_party/googletest-release-1.10.0/googletest/test/gtest_repeat_test.cc:85:1: error: syntax error [syntaxError]
TEST(FooTest, ShouldFail) {
^
third_party/googletest-release-1.10.0/googletest/test/gtest_sole_header_test.cc:43:27: error: There is an unknown macro here somewhere. Configuration is required. If ; is a macro then please configure it. [unknownMacro]
  EXPECT_NO_FATAL_FAILURE(;);
                          ^
third_party/googletest-release-1.10.0/googletest/test/gtest_stress_test.cc:119:1: error: syntax error [syntaxError]
TEST(StressTest, CanUseScopedTraceAndAssertionsInManyThreads) {
^
third_party/googletest-release-1.10.0/googletest/test/gtest_unittest.cc:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations. [toomanyconfigs]

^
third_party/googletest-release-1.10.0/googletest/test/gtest_unittest.cc:5346:26: error: syntax error [syntaxError]
INSTANTIATE_TEST_SUITE_P(, CodeLocationForTESTP, Values(0));
                         ^
third_party/googletest-release-1.10.0/googletest/src/gtest-death-test.cc:1119:0: style: The function 'AssumeRole' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googlemock/src/gmock-cardinalities.cc:142:0: style: The function 'AtMost' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest-port.cc:1183:0: style: The function 'CaptureStdout' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest-port.cc:1256:0: style: The function 'ClearInjectableArgvs' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:1444:0: style: The function 'CmpHelperEQ' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:1486:0: style: The function 'CmpHelperGE' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:1489:0: style: The function 'CmpHelperGT' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:1480:0: style: The function 'CmpHelperLE' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:1483:0: style: The function 'CmpHelperLT' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:1477:0: style: The function 'CmpHelperNE' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:1510:0: style: The function 'CmpHelperSTRCASEEQ' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:1540:0: style: The function 'CmpHelperSTRCASENE' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:1494:0: style: The function 'CmpHelperSTREQ' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:1526:0: style: The function 'CmpHelperSTRNE' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/samples/sample6_unittest.cc:47:0: style: The function 'CreatePrimeTable < OnTheFlyPrimeTable >' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/samples/sample6_unittest.cc:52:0: style: The function 'CreatePrimeTable < PreCalculatedPrimeTable >' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:1435:0: style: The function 'DoubleLE' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:1371:0: style: The function 'DoubleNearPredFormat' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:3553:0: style: The function 'EscapeXmlText' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest-death-test.cc:231:0: style: The function 'ExitedUnsuccessfully' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/samples/sample1.cc:35:0: style: The function 'Factorial' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:1428:0: style: The function 'FloatLE' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googlemock/src/gmock-matchers.cc:52:0: style: The function 'FormatMatcherDescription' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:1355:0: style: The function 'GetBoolAssertionFailureMessage' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest-port.cc:1193:0: style: The function 'GetCapturedStdout' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googlemock/src/gmock-internal-utils.cc:112:0: style: The function 'GetFailureReporter' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googlemock/src/gmock-internal-utils.cc:187:0: style: The function 'GetWithoutMatchers' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googlemock/src/gmock-internal-utils.cc:189:0: style: The function 'IllegalDoDefault' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest-death-test.cc:145:0: style: The function 'InDeathTestChild' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:1623:0: style: The function 'IsNotSubstring' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googlemock/src/gmock-cardinalities.cc:76:0: style: The function 'IsSatisfiedByCallCount' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googlemock/src/gmock-cardinalities.cc:80:0: style: The function 'IsSaturatedByCallCount' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:1611:0: style: The function 'IsSubstring' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googlemock/src/gmock-spec-builders.cc:69:0: style: The function 'LogWithLocation' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:2581:0: style: The function 'MakeAndRegisterTestInfo' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest-death-test.cc:1595:0: style: The function 'ParseInternalRunDeathTestFlag' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/samples/sample4.cc:52:0: style: The function 'Print' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest-printers.cc:114:0: style: The function 'PrintBytesInObjectTo' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest-printers.cc:426:0: style: The function 'PrintStringTo' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest-printers.cc:435:0: style: The function 'PrintWideStringTo' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googlemock/src/gmock-internal-utils.cc:96:0: style: The function 'ReportFailure' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:2593:0: style: The function 'ReportInvalidTestSuiteType' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/test/googletest-catch-exceptions-test_.cc:149:0: style: The function 'SetUpTestSuite' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/test/googletest-catch-exceptions-test_.cc:113:0: style: The function 'TearDownTestSuite' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest.cc:6136:0: style: The function 'TempDir' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest-printers.cc:321:0: style: The function 'UniversalPrintArray' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/src/gtest-death-test.cc:1096:0: style: The function 'Wait' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googlemock/src/gmock_main.cc:54:0: style: The function '_tmain' is never used. [unusedFunction]

^
src/World/BuildMultipleObjects3_9.cpp:20:0: style: The function 'build_multiple_objects_3_9' is never used. [unusedFunction]

^
src/World/BuildSingleSphere3_6_5.cpp:17:0: style: The function 'build_single_sphere_3_6_5' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googletest/test/googletest-param-test-test.cc:968:0: style: The function 'dummy_value' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googlemock/src/gmock_main.cc:42:0: style: The function 'loop' is never used. [unusedFunction]

^
src/Samplers/Sampler.cpp:229:0: style: The function 'map_samples_to_hemisphere' is never used. [unusedFunction]

^
src/Samplers/Sampler.cpp:253:0: style: The function 'map_samples_to_sphere' is never used. [unusedFunction]

^
src/Samplers/Sampler.cpp:174:0: style: The function 'map_samples_to_unit_disk' is never used. [unusedFunction]

^
src/World/BuildMultipleObjects3_9.cpp:44:0: style: The function 'render_multiple_objects_3_9' is never used. [unusedFunction]

^
src/World/BuildSingleSphere3_6_5.cpp:30:0: style: The function 'render_single_sphere_3_6_5' is never used. [unusedFunction]

^
src/BRDFs/BRDF.cpp:47:0: style: The function 'sample_f' is never used. [unusedFunction]

^
src/Samplers/Sampler.cpp:335:0: style: The function 'sample_hemisphere' is never used. [unusedFunction]

^
src/Samplers/Sampler.cpp:363:0: style: The function 'sample_one_set' is never used. [unusedFunction]

^
src/Samplers/Sampler.cpp:348:0: style: The function 'sample_sphere' is never used. [unusedFunction]

^
src/Samplers/Sampler.cpp:322:0: style: The function 'sample_unit_disk' is never used. [unusedFunction]

^
src/Samplers/Sampler.cpp:99:0: style: The function 'set_num_sets' is never used. [unusedFunction]

^
src/World/ViewPlane.cpp:103:0: style: The function 'set_sampler' is never used. [unusedFunction]

^
third_party/googletest-release-1.10.0/googlemock/src/gmock_main.cc:36:0: style: The function 'setup' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

